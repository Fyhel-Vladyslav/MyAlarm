import React, { useCallback } from 'react';
import MicRecorder from "mic-recorder-to-mp3"
import { useEffect, useState, useRef} from "react"
import {View, Text, TouchableOpacity} from 'react-native';
import Button from "./components/Button";
//import axios from "axios"

  // Set AssemblyAI Axios Header
  const apiKey = "f17d209777f7463d92f4b113328e21cf";

  const headers = {
    'Authorization': 'f17d209777f7463d92f4b113328e21cf',
    'Content-Type': 'application/json',
    'Transfer-Encoding': 'chunked'
};


const App = () => {
  // Mic-Recorder-To-MP3
  const recorder = useRef(null) //Recorder
  const audioPlayer = useRef(null) //Ref for the HTML Audio Tag
  const [blobURL, setBlobUrl] = useState(null)
  const [audioFile, setAudioFile] = useState(null)
  const [isRecording, setIsRecording] = useState(null)

  useEffect(() => {
    //Declares the recorder object and stores it inside of ref
    recorder.current = new MicRecorder({ bitRate: 128 })
  }, [])

  const startRecording = () => {
    // Check if recording isn't blocked by browser
    console.log("DA st");
    recorder.current.start().then(() => {
      setIsRecording(true)
    })
  }

  const stopRecording = () => {
    recorder.current
      .stop()
      .getMp3()
      .then(([buffer, blob]) => {
        const file = new File(buffer, "audio.mp3", {
          type: blob.type,
          lastModified: Date.now(),
        })
        const newBlobUrl = URL.createObjectURL(blob)
        setBlobUrl(newBlobUrl)
        setIsRecording(false)
        setAudioFile(file)
      })
      .catch((e) => console.log(e))
  }

  // AssemblyAI API

  // State variables
  const [uploadURL, setUploadURL] = useState("")
  const [transcriptID, setTranscriptID] = useState("")
  const [transcriptData, setTranscriptData] = useState("")
  const [transcript, setTranscript] = useState("")
  const [isLoading, setIsLoading] = useState(true)

  // Upload the Audio File and retrieve the Upload URL
  useEffect(() => {
    if (audioFile) {
      fetch('https://api.assemblyai.com/v2/upload', {
        method: 'POST',
        headers: headers,
        body: audioFile
    })
    .then(response => response.json())
    .then(data => {
      console.log("Dasasdas")
        setUploadURL(data.upload_url);
        setTranscriptID(data.id);
    })
    .catch(error => console.error(error));
    }
  }, [audioFile])

  // Submit the Upload URL to AssemblyAI and retrieve the Transcript ID
  const submitTranscriptionHandler = () => {
    console.log("sumbm");
    fetch('https://api.assemblyai.com/v2/transcript', {
      method: "POST",
      headers: {
        authorization: apiKey,
        "content-type": "application/json",
        "transfer-encoding": "chunked",
      },
      body: JSON.stringify({
        audio_url: "https://bit.ly/3yxKEIY"
      })
  })
  .then(response => response.json())
  .then(data => {
    console.log(data.id);
    console.log("data.id");

      setTranscriptID(data.id);
  })
  .catch(error => console.error(error));
  }

  // Check the status of the Transcript
  const checkStatusHandler = async () => {
    setIsLoading(true)
    try {
      await fetch(`https://api.assemblyai.com/v2/transcript/${transcriptID}`, {
        method: 'GET',
        headers: headers
    })
    .then(response => response.json())
    .then(data => {
      console.log(data)

      console.log("transcriptID")
      console.log(transcriptID)

        setTranscriptData(data);
    })
    .catch(error => console.error(error));

    } catch (err) {
      console.error(err)
    }
  }

  // Periodically check the status of the Transcript
  useEffect(() => {
    const interval = setInterval(() => {
      console.log("da");
      console.log(transcriptData);
      if (transcriptData.status !== "completed" && isLoading) {
        checkStatusHandler();
        console.log("1");
      } else {
        console.log("2");
        setIsLoading(false)
        setTranscript(transcriptData.text)
        console.log(transcriptData.text);
        clearInterval(interval)
      }
    }, 10000)
    return () => clearInterval(interval)
  },)
  const handleClick = useCallback(() => {
    submitTranscriptionHandler();
}, []); // Dependencies should be added if any variable inside the function is used

  return (
    <View>
      <Text>React Speech Recognition App</Text>
      
      <TouchableOpacity onPress={handleClick}>
            <Text>Press Me</Text>
        </TouchableOpacity>
        <View>
          
      {transcriptData.status === "completed" ? (
        <Text>{transcript}</Text>
      ) : (
        <Text>{transcriptData.status}</Text>
      )}
      </View>
    </View>
  )
}

export default App